############################################################################################################################################################################################
                                                                              javascript 1
############################################################################################################################################################################################



*******************************************************************************************************************************************************************************************************************************************
Write a function createHelloWorld. It should return a new function that always returns "Hello World".
*********************************************************************************************************************************************************************************************************************

When, Where and How to use the arrow function syntax!!
Arrow functions were first introduced in ES6 (ECMAScript 2015). They provide a concise and convenient syntax for defining functions. Let's discuss how,when and where..

The traditional function for adding two numbers can be given as :

const add = function(a, b) {
  return a + b;
}
When the above code is converted to arrow function we can skip the return part as an arrow functions automatically return the value of the expression after the arrow (=>) symbol, without the need for an explicit return statement.
const add = (a, b) => a + b;
Lexical this : One of the best thing that arrow function syntax introduced to us

Arrow function has lexical this binding i.e they inherit the this value of the enclosing scope. This can be particularly useful when working with event listeners or callback functions, where the this value can be unpredictable.
For example in the following example the arrow function used as the event listener for the click event inherits the this value of the enclosing scope (which is the global window object), rather than having its own this value like a traditional function would.
const button = document.querySelector('button');
button.addEventListener('click', () => {
  console.log(this); // logs the window object, not the button
});
When not to use the Arrow function syntax:

Arrow functions cannot be used as constructors to create new objects, because they do not have their own this value. If you need to create objects using the new keyword, you will need to use a traditional function instead.
Arrow functions cannot be used as generator functions that use the yield keyword to return multiple values over time. If you need to use the yield keyword, you will need to use a traditional function instead.
You must be thinking what is this yield keyword? well, The yield keyword is used in special functions called generator functions, which can return multiple values over time instead of returning just one value like a normal function. When the yield keyword is encountered in the generator function, it pauses the function and returns a value, and the function can be resumed later to return more values.
Basically its like a pause and resume functionality.
We will discuss more about event listeners and callback functions as we go further in 30days of JS challenge.

Answer to todays(#1) JS challenge:
var createHelloWorld = function() {
        return () => "Hello World";
};
TIme and Space : O(1)

############################################################################################################################################################################################
                                                                              javascript 2
############################################################################################################################################################################################

*******************************************************************************************************************************************************************************************************************************************
Given an integer n, return a counter function. This counter function initially returns n and then returns 1 more than the previous value every subsequent time it is called (n, n + 1, n + 2, etc).
*********************************************************************************************************************************************************************************************************************


When, Where, What, and How to use closure!!!
First of all closure is not something you create it's something that the language has created for itself for appropriate development and we need to crack this code that how the language uses it.

"To be honest, a good developer's greatest fear is discovering that something working but not knowing how it works."

What is Closure ?
A closure is created when a function is defined inside another function, and the inner function references variables in the outer function's scope. When the inner function is returned from the outer function, it retains a reference to the outer function's scope, and can continue to access those variables even after the outer function has finished executing. Vice-Versa is not true!!
In simple terms a closure can "remember" values from its outer function's scope and use them later, even if the outer function has returned and those values would normally be out of scope.
When to use closure concept ?
FIrst let's summarize the definition as usually the definition gives the answer for when to use..

From definition you can see that it's used for retrival of values from outer parent function so we can understand that closure can be used for retrival of dead values which have become out of scope. also we can comprehend that it can used for privating some varibles or function.
Thus closures are useful for creating private variables and functions, implementing partial function application, and preserving state in asynchronous code.
While writing the code whenever there is a need for these types of thing try to incorporate this closure concept i.e. In a programmer languge it's called lexical environment
Where and How to use closure concept ?
Private variables and functions:
const makeCounter = () => {
  let count = 0;
  
  return () => {
    count++;
    console.log(count);
  }
}

let counter = makeCounter();
counter(); // logs 1
counter(); // logs 2
counter(); // logs 3
In this example, makeCounter is an arrow function that returns another arrow function. The returned function increments a count variable each time it is called, and logs the new value of count to the console.
When makeCounter is called, it creates a new scope with a count variable initialized to 0. It then returns a new arrow function that "closes over" this scope and increments the count variable each time it is called.
When we assign the returned arrow function to the counter variable, we create a closure that retains a reference to the count variable.
Each time we call counter(), it increments the count variable and logs the new value to the console, because it is still "closing over" the original count variable in the outer function's scope.
Thus because the count variable is not exposed outside of the returned object, it is effectively a private variable that can only be accessed or modified through the makeCounter() methods.
Partial function:
I was introduced to this concept name during development phase but was shocked that unknowingly I have used it many times. I'm sure that you all also must have use this:
function add(x) {
  return function(y) {
    return x + y;
  }
}

let add5 = add(5);
console.log(add5(3)); // 8
In this example, the add() function returns another function that takes a single argument and returns the sum of that argument and the x value from the outer function's scope.
This allows us to "partially apply" the add() function by passing in an x value and getting back a new function that always adds that value to its argument.
Thuse we can then use the new function like any other function, passing in different y values as needed.
For preserving states in asynchronous code:
The below snippet is from my personal project:)
const animate = (element, from, to, duration) => {
  let start = performance.now();
  
  const update = () => {
    let time = performance.now() - start;
    let progress = time / duration;
    let value = from + (to - from) * progress;
    
    element.style.left = value + 'px';
    
    if (progress < 1) {
      requestAnimationFrame(update);
    }
  }
  
  requestAnimationFrame(update);
}

let element = document.getElementById('my-element');
animate(element, 0, 100, 1000);
In this example, the animate() function creates a closure over the start variable, which is used to calculate the elapsed time since the animation started.
The update() function also "closes over" the element, from, to, and duration arguments, so that it can use them to update the element's position over time.
Thus by creating a closure over these values, we can preserve their state between animation frames, even though the update() function is called asynchronously by requestAnimationFrame().
Answer to todays(#2) JS challenge:
var createCounter = function(n) {
    return ()=> n++
};

############################################################################################################################################################################################
                                                                              javascript 2
############################################################################################################################################################################################

*******************************************************************************************************************************************************************************************************************************************
Write a function createCounter. It should accept an initial integer init. It should return an object with three functions.

The three functions are:

increment() increases the current value by 1 and then returns it.
decrement() reduces the current value by 1 and then returns it.
reset() sets the current value to init and then returns it.
*********************************************************************************************************************************************************************************************************************

From the question we can decipher that we need to have three functions increment(), decrement() and reset(). Now let's think which one will be appropriate method to solve this question.

1. Using Traditional Function
A traditional function is defined using the function keyword. It can be a named function or an anonymous function assigned to a variable.
In the following code we have created three functions increment(), decrement() and reset() using the function keyword. Inside this function we need to do the appropriate operation that was instructed in the question i.e. for increment() we need to return the currentvalue+1, similarly in decrement() we need to return the currentvalue-1 and in reset() we need to assign originalvalue to the currentvalue.
var createCounter = function(init) {
  let presentCount = init;

  function increment() {
    return ++presentCount;
  }

  function decrement() {
      return --presentCount;
  }

  function reset() {
      return (presentCount = init);
  }

  return { increment, decrement, reset };
};
Time and Space: O(1)

2. Using Arrow Function
An arrow function is a shorter syntax for defining functions, introduced in ES6.
It uses the => syntax instead of the function keyword, and has some differences in behavior compared to traditional functions, such as inheriting the this value from the surrounding context
For better understanding please read this posts : Arrow function(6min read) by @Jatin and Closure on Counter-1(8min read) problem by @Jatin
var createCounter = function(init) {
    let presentCount = init
    return {
        increment:()=> ++presentCount,
        decrement:()=> --presentCount,
        reset:()=> presentCount = init,
    }
};
Time and Space: O(1)

3. Using Class
A class is a template for creating objects with a set of properties and methods.

In ES6, classes were introduced as syntactic sugar over the prototype-based inheritance model but shortly after that It provided a way to support inheritance and can have static methods and properties, getters and setters, and more. Thus they provided a way to write object-oriented code in a more concise and organized way.

In the following example the Couter is the name of the class.

The constructor method is a special method that is called when an object is created based on the class.
It initializes the object with properties init and presentCount. The increment(), decrement()and reset() method are regular methods that can be called on an instance of the Counter class to get the output
To create an object based on a class we use the new operator i.e. we create an object called createCounter based on the Counter class, passing in the init value as arguments to the constructor.
class Counter {
  constructor(init) {
    this.init = init;
    this.presentCount = init;
  }

  increment() {
    this.presentCount += 1;
    return this.presentCount;
  }

  decrement() {
    this.presentCount -= 1;
    return this.presentCount;
  }

  reset() {
    this.presentCount = this.init;
    return this.presentCount;
  }
}

var createCounter = function(init) {
  return new Counter(init);
};
Time and Space: O(1)

In conclusion which one is the better way??
Classes are useful for creating objects with shared behavior.
Traditional functions are useful for reusable chunks of code
Arrow functions are useful for short, concise functions or when preserving the value of this is important.
Thus, I believe that classes are the best way to implement this types of problems in real life as they give flexibility of scaling with the shared behaviour properties.

############################################################################################################################################################################################
                                                                              javascript 3
############################################################################################################################################################################################

*******************************************************************************************************************************************************************************************************************************************
Write a function expect that helps developers test their code. It should take in any value val and return an object with the following two functions.

toBe(val) accepts another value and returns true if the two values === each other. If they are not equal, it should throw an error "Not Equal".
notToBe(val) accepts another value and returns true if the two values !== each other. If they are equal, it should throw an error "Equal".
 
*********************************************************************************************************************************************************************************************************************
















